import React from 'react';
import JBSelectBoxData from './JBSelectBoxData.min';
import { observe, extendObservable, intercept, toJS, computed, observable } from 'mobx';
import { observer } from 'mobx-react';
import './JBSelectBox.css';

var _class, _descriptor, _temp;
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object['ke' + 'ys'](descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object['define' + 'Property'](target, property, desc); desc = null; } return desc; }
function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and set to use loose mode. ' + 'To use proposal-class-properties in spec mode with decorators, wait for ' + 'the next major version of decorators in stage 2.'); }
var JBSelectBoxService = (_class = (_temp =
function () {
  _createClass(JBSelectBoxService, [{
    key: "isShowListEmpty",
    get: function get() {
      var flag = true;
      this.config.options.forEach(function (item) {
        if (item.JBSelectBoxDetail.hidden == false) {
          flag = false;
          return;
        }
      });
      return flag;
    }
  }]);
  function JBSelectBoxService(props) {
    var _this = this;
    _classCallCheck(this, JBSelectBoxService);
    _defineProperty(this, "defaultConfig", new JBSelectBoxData());
    _defineProperty(this, "config", void 0);
    _defineProperty(this, "props", void 0);
    _defineProperty(this, "Dropstatus", _initializerWarningHelper(_descriptor, this));
    _defineProperty(this, "elements", {
      inputField: null,
      listElement: null
    });
    this.props = props;
    this.config = this.mergeObject(props.config, this.defaultConfig);
    observe(this.config, "options", function (change) {
      return _this.onComponentPropsChange(change);
    });
    this.componentClassNames = props.className;
    this.onChangeEvent = props.onChange;
    this.config.triggers.resetStates = function () {
      return _this.resetStates();
    };
    this.config.triggers.focus = function () {
      return _this.focusOnSelectBox();
    };
    this.standardConfig();
    if (props.autoFocus == true || props.autoFocus == "true") {
      this.config.autoFocus = true;
    }
  }
  _createClass(JBSelectBoxService, [{
    key: "onComponentPropsChange",
    value: function onComponentPropsChange(change) {
      var _this2 = this;
      if (change.name == "options") {
        change.newValue.forEach(function (item) {
          _this2.defineJBSelectBoxDetail(item);
        });
        this.config.options = change.newValue;
      }
    }
  }, {
    key: "mergeObject",
    value: function mergeObject(inputConfig, defaultConfig) {
      var addedProperty = {};
      for (var prop in defaultConfig) {
        if (inputConfig[prop] == undefined || inputConfig[prop] == null) {
          addedProperty[prop] = defaultConfig[prop];
        }
      }
      extendObservable(inputConfig, addedProperty);
      return inputConfig;
    }
  }, {
    key: "standardConfig",
    value: function standardConfig() {
      var _this3 = this;
      this.config.options.map(function (item) {
        _this3.defineJBSelectBoxDetail(item);
      });
      if (this.config.allowFreeSelect) {
        this.config.options.unshift({
          caption: "",
          value: ""
        });
        this.defineJBSelectBoxDetail(this.config.options[0]);
        this.config.options[0].JBSelectBoxDetail.isFreeOptionRow = true;
      }
      intercept(this.config, 'options', function (change) {
        if (change.newValue.length > 0) {
          change.newValue.map(function (item) {
            _this3.defineJBSelectBoxDetail(item);
          });
        }
        setTimeout(function () {
          return _this3.UpdateValueByOptions();
        }, 0);
        return change;
      });
      if (!this.props.config.fieldsNames) {
        var obj = {
          fieldsNames: toJS(this.config.fieldsNames)
        };
        extendObservable(this.props.config, obj);
      }
      intercept(this.props.config, 'fieldsNames', function (change) {
        _this3.config.fieldsNames = change.newValue;
      });
    }
  }, {
    key: "makeSelectedValueNull",
    value: function makeSelectedValueNull() {
      this.config.value = null, this.elements.inputField.value = "";
    }
  }, {
    key: "UpdateValueByOptions",
    value: function UpdateValueByOptions(newValue) {
      var _this4 = this;
      if (!newValue) {
        newValue = this.props.value;
      }
      var optionObject = this.config.options.find(function (x) {
        return x[_this4.config.fieldsNames.value] == newValue;
      });
      if (!optionObject) {
        optionObject = this.config.options.find(function (x) {
          return x[_this4.config.fieldsNames.caption] == newValue;
        });
      }
      if (optionObject) {
        this.config.value = optionObject;
        this.elements.inputField.value = optionObject[this.config.fieldsNames.caption];
      }
    }
  }, {
    key: "onInputFocus",
    value: function onInputFocus(event) {
      this.focusOnSelectBox();
    }
  }, {
    key: "focusOnSelectBox",
    value: function focusOnSelectBox() {
      var _this5 = this;
      this.Dropstatus.show = true;
      this.focusStatus = true;
      setTimeout(function () {
        _this5.elements.inputField.focus();
      }, 0);
      if (this.config.options[0]) {
        this.setActiveMenuItem(this.config.options[0]);
      }
      this.hideAddFreeRowOption();
    }
  }, {
    key: "hideAddFreeRowOption",
    value: function hideAddFreeRowOption() {
      var addFreeRowOption = this.config.options.find(function (x) {
        return x.JBSelectBoxDetail.isFreeOptionRow;
      });
      if (addFreeRowOption && this.elements.inputField.value == "") {
        addFreeRowOption.JBSelectBoxDetail.addFreeRowOptionHidden = true;
      }
    }
  }, {
    key: "onInputblur",
    value: function onInputblur(event) {
      var _this6 = this;
      if (this.focusStatus) {
        setTimeout(function () {
          _this6.Dropstatus.show = false;
          _this6.focusStatus = false;
          _this6.resetSearchHidden();
        }, 200);
        if (this.config.value) {
          if (this.config.value[this.config.fieldsNames.value] || this.config.value[this.config.fieldsNames.caption.length > 0]) {
            if (this.elements.inputField.value == "" && this.config.allowNull) {
              this.resetStates();
            } else {
              this.elements.inputField.value = this.config.value[this.config.fieldsNames.caption];
            }
          }
          if (this.config.allowFreeSelect) ;
        } else {
          if (this.config.allowFreeSelect) {
            this.selectCurrentActiveMenu();
          } else {
            this.elements.inputField.value = "";
          }
        }
      }
    }
  }, {
    key: "setActiveMenuItem",
    value: function setActiveMenuItem(item) {
      var currentActiveItem = this.getActiveMenuItem();
      if (currentActiveItem) {
        currentActiveItem.JBSelectBoxDetail.active = false;
      }
      if (item) {
        item.JBSelectBoxDetail.active = true;
      }
    }
  }, {
    key: "DeactivateMenuItem",
    value: function DeactivateMenuItem() {
      var currentActiveItem = this.getActiveMenuItem();
      if (currentActiveItem) {
        currentActiveItem.JBSelectBoxDetail.active = false;
      }
    }
  }, {
    key: "onInputKeyUp",
    value: function onInputKeyUp(event) {
      switch (event.keyCode) {
        case 40:
          var currentIndex = this.getActiveMenuItemIndex();
          var newIndex = this.SetActiveMenuItemIndexToNext(currentIndex);
          this.setScroll(event, newIndex);
          break;
        case 38:
          var currentIndex = this.getActiveMenuItemIndex();
          var newIndex = this.SetActiveMenuItemIndexToPrev(currentIndex);
          this.setScroll(event, newIndex);
          break;
        case 13:
          this.selectCurrentActiveMenu();
          break;
        default:
          if (this.config.allowFreeSelect) {
            this.updateAddFreeRowOption(event.target.value);
          }
          if (this.config.callbacks.onFilterTextChange) {
            this.config.callbacks.onFilterTextChange(event);
          }
          this.filterMenuListByString(event.target.value);
          return true;
          break;
      }
    }
  }, {
    key: "setScroll",
    value: function setScroll(event, ActiveMenuItemIndex) {
      var currentScrollPosition = this.elements.listElement.scrollTop;
      var currentItemTop = this.config.options[ActiveMenuItemIndex].JBSelectBoxDetail.optionDom.offsetTop;
      var listHeight = this.elements.listElement.clientHeight;
      if (currentItemTop > currentScrollPosition + listHeight) {
        this.elements.listElement.scroll(0, currentItemTop);
      }
      if (currentItemTop < currentScrollPosition) {
        this.elements.listElement.scroll(0, currentScrollPosition - listHeight);
      }
    }
  }, {
    key: "updateAddFreeRowOption",
    value: function updateAddFreeRowOption(newValue) {
      var addFreeRowOption = this.config.options.find(function (x) {
        return x.JBSelectBoxDetail.isFreeOptionRow;
      });
      if (newValue == "") {
        addFreeRowOption.JBSelectBoxDetail.addFreeRowOptionHidden = true;
      } else {
        addFreeRowOption[this.config.fieldsNames.value] = newValue;
        addFreeRowOption[this.config.fieldsNames.caption] = newValue;
        addFreeRowOption.JBSelectBoxDetail.addFreeRowOptionHidden = false;
      }
    }
  }, {
    key: "selectCurrentActiveMenu",
    value: function selectCurrentActiveMenu() {
      var selectedItem = this.getActiveMenuItem();
      if (!selectedItem) {
        return;
      } else {
        if (!selectedItem.JBSelectBoxDetail.hidden) {
          this.selectItem(selectedItem);
        }
      }
    }
  }, {
    key: "selectItem",
    value: function selectItem(item) {
      if (this.config.triggers.beforeChange) {
        this.config.triggers.beforeChange({
          selectedItem: item
        });
      }
      this.config.value = item;
      if (this.onChangeEvent) {
        this.onComponentValueChange();
      }
      this.Dropstatus.show = false;
      this.elements.inputField.value = item[this.config.fieldsNames.caption];
    }
  }, {
    key: "SetActiveMenuItemIndexToNext",
    value: function SetActiveMenuItemIndexToNext(currentIndex) {
      var _this7 = this;
      if (currentIndex == this.config.options.length - 1) {
        currentIndex = -1;
      }
      var nextIndex = currentIndex + 1;
      this.config.options.forEach(function (item, index) {
        if (_this7.config.options[nextIndex].JBSelectBoxDetail.hidden != true) {
          return;
        }
        nextIndex++;
        if (nextIndex == _this7.config.options.length) {
          nextIndex = 0;
        }
        if (index + 1 == _this7.config.options.length) {
          return -1;
        }
      });
      this.setActiveMenuItem(this.config.options[nextIndex]);
      return nextIndex;
    }
  }, {
    key: "SetActiveMenuItemIndexToPrev",
    value: function SetActiveMenuItemIndexToPrev(currentIndex) {
      var _this8 = this;
      if (currentIndex == 0) {
        currentIndex = this.config.options.length;
      }
      var prevIndex = currentIndex - 1;
      this.config.options.forEach(function (item, index) {
        if (_this8.config.options[prevIndex].JBSelectBoxDetail.hidden != true) {
          return;
        }
        prevIndex--;
        if (prevIndex == -1) {
          prevIndex = _this8.config.options.length - 1;
        }
        if (index + 1 == _this8.config.options.length) ;
      });
      this.setActiveMenuItem(this.config.options[prevIndex]);
      return prevIndex;
    }
  }, {
    key: "filterMenuListByString",
    value: function filterMenuListByString(filterString) {
      var _this9 = this;
      var isActivitedItemHided = false;
      this.config.options.forEach(function (item, index) {
        if (item[_this9.config.fieldsNames.caption].includes(filterString)) {
          item.JBSelectBoxDetail.searchHidden = false;
        } else {
          item.JBSelectBoxDetail.searchHidden = true;
          if (item.JBSelectBoxDetail.active == true) {
            isActivitedItemHided = true;
          }
        }
      });
      if (this.isShowListEmpty) {
        var index = this.getActiveMenuItemIndex();
      }
      if (isActivitedItemHided) {
        this.SetActiveMenuItemIndexToNext(-1);
      }
    }
  }, {
    key: "getActiveMenuItem",
    value: function getActiveMenuItem() {
      var _this10 = this;
      var activeItem = this.config.options.find(function (item) {
        _this10.defineJBSelectBoxDetail(item);
        if (item.JBSelectBoxDetail.active == true) {
          return item;
        }
      });
      return activeItem;
    }
  }, {
    key: "getActiveMenuItemIndex",
    value: function getActiveMenuItemIndex() {
      var _this11 = this;
      var activeItemIndex = this.config.options.findIndex(function (item, index) {
        _this11.defineJBSelectBoxDetail(item);
        if (item.JBSelectBoxDetail.active == true) {
          return item;
        }
      });
      return activeItemIndex;
    }
  }, {
    key: "defineJBSelectBoxDetail",
    value: function defineJBSelectBoxDetail(item) {
      if (_typeof(item.JBSelectBoxDetail) != "object") {
        extendObservable(item, {
          JBSelectBoxDetail: {
            hidden: computed(function () {
              return this.searchHidden || this.externalHidden || this.addFreeRowOptionHidden;
            }),
            active: false,
            searchHidden: false,
            externalHidden: false,
            addFreeRowOptionHidden: false,
            isFreeOptionRow: false
          }
        });
      }
    }
  }, {
    key: "resetStates",
    value: function resetStates() {
      this.config.value = null, this.elements.inputField.value = "";
      this.resetSearchHidden();
    }
  }, {
    key: "resetSearchHidden",
    value: function resetSearchHidden() {
      this.config.options.forEach(function (item, index) {
        item.JBSelectBoxDetail.searchHidden = false;
      });
    }
  }, {
    key: "onComponentFocus",
    value: function onComponentFocus(e) {
      this.elements.inputField.focus();
    }
  }, {
    key: "onComponentValueChange",
    value: function onComponentValueChange() {
      var _this12 = this;
      var pureValue = this.config.value[this.config.fieldsNames.value];
      if (!pureValue) {
        pureValue = this.config.value[this.config.fieldsNames.caption];
      }
      var event = new CustomEvent("change", {
        detail: {
          newValue: pureValue,
          newValueObject: this.config.value
        },
        bubbles: true,
        cancelable: true
      });
      event.simulated = true;
      var tracker = this.JBSelectBoxComponentDom._valueTracker;
      if (tracker) {
        tracker.setValue(pureValue);
      }
      this.JBSelectBoxComponentDom.value = pureValue;
      this.JBSelectBoxComponentDom.onchange = function (e) {
        return _this12.onChangeEvent(e);
      };
      this.JBSelectBoxComponentDom.dispatchEvent(event);
    }
  }, {
    key: "observeValue",
    value: function observeValue(props) {}
  }]);
  return JBSelectBoxService;
}(), _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "Dropstatus", [observable], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: function initializer() {
    return {
      show: false
    };
  }
}), _applyDecoratedDescriptor(_class.prototype, "isShowListEmpty", [computed], Object.getOwnPropertyDescriptor(_class.prototype, "isShowListEmpty"), _class.prototype)), _class);

var _class$1;
function _typeof$1(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$1 = function _typeof(obj) { return typeof obj; }; } else { _typeof$1 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$1(obj); }
function _classCallCheck$1(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties$1(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
function _createClass$1(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$1(Constructor.prototype, protoProps); if (staticProps) _defineProperties$1(Constructor, staticProps); return Constructor; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof$1(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
var JBSelectBox = observer(_class$1 =
function (_React$Component) {
  _inherits(JBSelectBox, _React$Component);
  function JBSelectBox(props) {
    var _this;
    _classCallCheck$1(this, JBSelectBox);
    _this = _possibleConstructorReturn(this, _getPrototypeOf(JBSelectBox).call(this, props));
    _this.service = new JBSelectBoxService(props);
    return _this;
  }
  _createClass$1(JBSelectBox, [{
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      var changeValuePermissionFlag = false;
      if (this.service.config.value == null && nextProps.value != null) {
        changeValuePermissionFlag = true;
      }
      if (this.service.config.value != null && nextProps.value == null) {
        this.service.makeSelectedValueNull();
      }
      if (this.service.config.value && nextProps.value != this.service.config.value[this.service.config.fieldsNames.value]) {
        changeValuePermissionFlag = true;
      }
      if (changeValuePermissionFlag) {
        this.service.UpdateValueByOptions(nextProps.value);
      }
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.service.config.autoFocus == true) {
        this.service.onComponentFocus();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;
      return React.createElement("div", {
        className: "jb-select-box-component " + this.service.componentClassNames,
        onFocus: function onFocus(e) {
          return _this2.service.onComponentFocus(e);
        },
        ref: function ref(dom) {
          _this2.service.JBSelectBoxComponentDom = dom;
        }
      }, React.createElement("section", {
        key: "1",
        className: "input-field"
      }, React.createElement("input", {
        placeholder: this.service.config.placeHolder,
        type: "text",
        onFocus: function onFocus(e) {
          return _this2.service.onInputFocus(e);
        },
        onBlur: function onBlur(e) {
          return _this2.service.onInputblur(e);
        },
        onKeyUp: function onKeyUp(e) {
          _this2.service.onInputKeyUp(e);
        },
        ref: function ref(element) {
          _this2.service.elements.inputField = element;
        }
      }), React.createElement("div", {
        key: "3",
        className: "icon-wrapper",
        onClick: function onClick(e) {
          return _this2.service.onInputFocus(e);
        }
      }, this.service.config.isLoading && React.createElement("svg", {
        class: "circular-loader",
        viewBox: "25 25 50 50"
      }, React.createElement("circle", {
        class: "loader-path",
        cx: "50",
        cy: "50",
        r: "20",
        fill: "none"
      })), !this.service.config.isLoading && React.createElement("svg", {
        viewBox: "0 0 800 800",
        class: "arrow-icon"
      }, React.createElement("polygon", {
        points: "0,200 800,200 400,600"
      })))), React.createElement("section", {
        key: "2",
        className: "input-list " + (this.service.Dropstatus.show ? '' : 'hidden'),
        ref: function ref(_ref2) {
          return _this2.service.elements.listElement = _ref2;
        }
      }, React.createElement("ul", null, this.service.config.options.map(function (item, index) {
        if (!item.JBSelectBoxDetail.hidden) {
          return React.createElement("li", {
            onClick: function onClick(e) {
              return _this2.service.selectItem(item);
            },
            onMouseOver: function onMouseOver(e) {
              return _this2.service.setActiveMenuItem(item);
            },
            className: "" + (item.JBSelectBoxDetail.active ? 'active' : '') + (item.JBSelectBoxDetail.isFreeOptionRow ? ' free-option-row' : ''),
            key: 'jb-select-item-' + index,
            value: item[_this2.service.config.fieldsNames.value],
            ref: function ref(_ref) {
              return item.JBSelectBoxDetail.optionDom = _ref;
            }
          }, item[_this2.service.config.fieldsNames.caption], " ");
        }
      }), this.service.isShowListEmpty && React.createElement("li", {
        className: "empty-list-caption"
      }, "\u0645\u0648\u0631\u062F\u06CC \u0628\u0631\u0627\u06CC \u0627\u0646\u062A\u062E\u0627\u0628 \u0648\u062C\u0648\u062F \u0646\u062F\u0627\u0631\u062F"))));
    }
  }]);
  return JBSelectBox;
}(React.Component)) || _class$1;

export default JBSelectBox;
