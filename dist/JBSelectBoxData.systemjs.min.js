System.register(['mobx'], function (exports, module) {
    'use strict';
    var observable;
    return {
        setters: [function (module) {
            observable = module.observable;
        }],
        execute: function () {

            var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _temp;
            function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
            function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
            function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object['ke' + 'ys'](descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object['define' + 'Property'](target, property, desc); desc = null; } return desc; }
            var JBSelectBoxData = (_class = (_temp = function JBSelectBoxData() {
              _classCallCheck(this, JBSelectBoxData);
              _initializerDefineProperty(this, "options", _descriptor, this);
              _initializerDefineProperty(this, "fieldsNames", _descriptor2, this);
              _initializerDefineProperty(this, "value", _descriptor3, this);
              _initializerDefineProperty(this, "placeHolder", _descriptor4, this);
              this.triggers = {
                beforeChange: undefined,
                resetStates: null,
                focus: undefined
              };
              this.callbacks = {
                onFilterTextChange: undefined
              };
              this.autoFocus = false;
              this.allowFreeSelect = false;
              this.allowNull = true;
              this.isLoading = false;
            }, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, "options", [observable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return [
                ];
              }
            }), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, "fieldsNames", [observable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return {
                  value: 'value',
                  caption: 'caption'
                };
              }
            }), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, "value", [observable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return null;
              }
            }), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, "placeHolder", [observable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function initializer() {
                return "انتخاب کنید";
              }
            })), _class);
            exports('default', JBSelectBoxData);

        }
    };
});
